services:
  - type: web
    name: ai-tennis-backend
    runtime: python
    buildCommand: "cd backend && pip install -r requirements.txt"
    startCommand: "cd backend && uvicorn app.main:app --host 0.0.0.0 --port $PORT"
    envVars:
      - key: DATABASE_URL
        value: sqlite:///./ai_tennis.db
      - key: REDIS_URL
        fromService:
          type: redis
          name: ai-tennis-redis
          property: connectionString
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: ai-tennis-redis
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: redis
          name: ai-tennis-redis
          property: connectionString
      - key: UPLOAD_DIR
        value: ./uploads
      - key: MAX_FILE_SIZE
        value: "104857600"
      - key: USE_S3
        value: "false"
      - key: ALLOWED_HOSTS
        value: '["*"]'
      - key: SECRET_KEY
        generateValue: true
      - key: AI_MODEL_PATH
        value: ./models
      - key: PROCESSING_TIMEOUT
        value: "300"
      - key: DEBUG
        value: "false"
      - key: ENVIRONMENT
        value: production

  - type: worker
    name: ai-tennis-worker
    runtime: python
    buildCommand: "cd backend && pip install -r requirements.txt"
    startCommand: "cd backend && celery -A app.core.celery_app worker --loglevel=info"
    envVars:
      - key: DATABASE_URL
        value: sqlite:///./ai_tennis.db
      - key: REDIS_URL
        fromService:
          type: redis
          name: ai-tennis-redis
          property: connectionString
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: ai-tennis-redis
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: redis
          name: ai-tennis-redis
          property: connectionString

  - type: redis
    name: ai-tennis-redis
    plan: starter
    ipAllowList: []
